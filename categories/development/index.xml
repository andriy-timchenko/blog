<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Development on Andriy Timchenko Blog</title>
    <link>/categories/development/</link>
    <description>Recent content in Development on Andriy Timchenko Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Copyright © 2022, Andriy; All rights reserved.</copyright>
    <lastBuildDate>Tue, 23 Aug 2022 00:00:00 +0000</lastBuildDate><atom:link href="/categories/development/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Shinobi - The open source CCTV solution</title>
      <link>/post/shinobi-cctv/</link>
      <pubDate>Tue, 23 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>/post/shinobi-cctv/</guid>
      <description>Shinobi is Open Source, written in Node.js, and real easy to use. It is the future of CCTV and NVR for developers and end-users alike. It is catered to by professionals and most importantly by the one who created it.
SHINOBI DOCS Get Started ¶Some Aspects ¶Shinobi can be used as a Baby Monitor, Construction Site Montage Viewer, Store Camera DVR, and much more.
Defeats Limits ¶Don&amp;rsquo;t be held back by a maximum number of streams based on browser.</description>
    </item>
    
    <item>
      <title>Hugo v0.93.0 - Mermaid Diagrams</title>
      <link>/post/diagram-support/</link>
      <pubDate>Sat, 20 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>/post/diagram-support/</guid>
      <description>Hugo currently does not provide default templates for Mermaid diagrams. But you can easily add your own. One way to do it would be to create
layouts/_default/_markup/render-codeblock-mermaid.html:
1&amp;lt;div class=&amp;#34;mermaid&amp;#34;&amp;gt; 2 {{- .Inner | safeHTML }} 3&amp;lt;/div&amp;gt; 4{{ .Page.Store.Set &amp;#34;hasMermaid&amp;#34; true }} And then include this snippet at the bottom of the content template (below .Content):
1{{ if .Page.Store.Get &amp;#34;hasMermaid&amp;#34; }} 2 &amp;lt;script src=&amp;#34;https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; 3 &amp;lt;script&amp;gt; 4 mermaid.initialize({ startOnLoad: true }); 5 &amp;lt;/script&amp;gt; 6{{ end }} With that you can use the mermaid language in Markdown code blocks:</description>
    </item>
    
    <item>
      <title>(Hu)go Template Primer</title>
      <link>/post/goisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>/post/goisforlovers/</guid>
      <description>Hugo uses the excellent Go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in Go templates.
This document is a brief primer on using Go templates.</description>
    </item>
    
    <item>
      <title>Getting Started with Hugo</title>
      <link>/post/hugoisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>/post/hugoisforlovers/</guid>
      <description>Step 1. Install Hugo ¶Go to Hugo releases and download the appropriate version for your OS and architecture.
Save it somewhere specific as we will be using it in the next step.
More complete instructions are available at Install Hugo
Step 2. Build the Docs ¶Hugo has its own example site which happens to also be the documentation site you are reading right now.
Follow the following steps:
Clone the Hugo repository Go into the repo Run hugo in server mode and build the docs Open your browser to http://localhost:1313 Corresponding pseudo commands:</description>
    </item>
    
  </channel>
</rss>
